dart_code_metrics:
  rules:
    - avoid-accessing-collections-by-constant-index
    - avoid-accessing-other-classes-private-members
    - avoid-adjacent-strings
    - avoid-assigning-to-static-field
    - avoid-assignments-as-conditions
    - avoid-barrel-files
    - avoid-bitwise-operators-with-booleans
    - avoid-bottom-type-in-patterns
    - avoid-bottom-type-in-records
    - avoid-cascade-after-if-null
    - avoid-casting-to-extension-type
    - avoid-collapsible-if
    - avoid-collection-equality-checks
    - avoid-collection-methods-with-unrelated-types
    - avoid-commented-out-code
    - avoid-complex-arithmetic-expressions
    - avoid-complex-loop-conditions
    - avoid-conditions-with-boolean-literals
    - avoid-continue
    - avoid-contradictory-expressions
    - avoid-declaring-call-method
    - avoid-double-slash-imports
    - avoid-duplicate-cascades
    - avoid-duplicate-exports
    - avoid-duplicate-map-keys
    - avoid-duplicate-mixins
    - avoid-duplicate-named-imports
    - avoid-duplicate-patterns
    - avoid-duplicate-switch-case-conditions
    - avoid-duplicate-test-assertions
    - avoid-dynamic
    - avoid-empty-spread
    - avoid-empty-test-groups
    - avoid-equal-expressions
    - avoid-excessive-expressions
    - avoid-explicit-pattern-field-name
    - avoid-function-type-in-records
    - avoid-future-ignore
    - avoid-future-tostring
    - avoid-generics-shadowing
    - avoid-getter-prefix
    - avoid-global-state
    - avoid-identical-exception-handling-blocks
    - avoid-implicitly-nullable-extension-types
    - avoid-importing-entrypoint-exports
    - avoid-incorrect-uri
    - avoid-inverted-boolean-checks
    - avoid-keywords-in-wildcard-pattern
    - avoid-late-final-reassignment
    - avoid-long-records:
    - avoid-map-keys-contains
    - avoid-missed-calls
    - avoid-missing-completer-stack-trace
    - avoid-missing-interpolation
    - avoid-missing-test-files
    - avoid-misused-set-literals
    - avoid-misused-test-matchers
    - avoid-misused-wildcard-pattern
    - avoid-mixing-named-and-positional-fields
    - avoid-multi-assignment
    - avoid-mutating-parameters
    - avoid-negations-in-equality-checks
    - avoid-nested-extension-types
    - avoid-nested-futures
    - avoid-nested-records
    - avoid-nested-streams-and-futures
    - avoid-nested-try-statements
    - avoid-never-passed-parameters
    - avoid-non-final-exception-class-fields
    - avoid-not-encodable-in-to-json
    - avoid-nullable-tostring
    - avoid-one-field-records
    - avoid-only-rethrow
    - avoid-only-rethrow
    - avoid-passing-self-as-argument
    - avoid-positional-record-field-access
    - avoid-redundant-async
    - avoid-redundant-pragma-inline
    - avoid-referencing-discarded-variables
    - avoid-renaming-representation-getters
    - avoid-returning-cascad
    - avoid-self-assignment
    - avoid-self-compare
    - avoid-shadowed-extension-methods
    - avoid-single-field-destructuring
    - avoid-slow-collection-methods
    - avoid-stream-tostring
    - avoid-substring
    - avoid-suspicious-super-overrides
    - avoid-unassigned-late-fields
    - avoid-unconditional-break
    - avoid-unknown-pragma
    - avoid-unnecessary-block
    - avoid-unnecessary-collections
    - avoid-unnecessary-conditionals
    - avoid-unnecessary-constructor
    - avoid-unnecessary-continue
    - avoid-unnecessary-enum-arguments
    - avoid-unnecessary-enum-prefix
    - avoid-unnecessary-extends
    - avoid-unnecessary-futures
    - avoid-unnecessary-if
    - avoid-unnecessary-late-fields
    - avoid-unnecessary-length-check
    - avoid-unnecessary-negations
    - avoid-unnecessary-null-aware-elements
    - avoid-unnecessary-nullable-fields
    - avoid-unnecessary-nullable-return-type
    - avoid-unnecessary-overrides
    - avoid-unnecessary-patterns
    - avoid-unnecessary-return
    - avoid-unnecessary-statements
    - avoid-unnecessary-super
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unreachable-for-loop
    - avoid-unrelated-type-assertions
    - avoid-unrelated-type-casts
    - avoid-unsafe-reduce
    - avoid-unsafe-reduce
    - avoid-unused-assignment
    - avoid-unused-generics
    - avoid-unused-instances
    - avoid-unused-parameters
    - avoid-weak-cryptographic-algorithms
    - ban-name:
        entries:
          - ident: aspectRation
            description: Typo. Use aspectRatio
    - function-always-returns-same-value
    - handle-throwing-invocations
    - match-positional-field-names-on-assignment
    - member-ordering:
        order:
          - constructor
          - public-named-constructor
          - protected-named-constructor
          - private-named-constructor
          - public-const-static-fields
          - protected-const-static-fields
          - private-const-static-fields
          - public-static-fields
          - protected-static-fields
          - private-static-fields
          - public-static-getters-setters
          - protected-static-getters-setters
          - private-static-getters-setters
          - public-final-fields
          - protected-final-fields
          - private-final-fields
          - public-late-final-fields
          - protected-late-final-fields
          - private-late-final-fields
          - public-var-fields
          - protected-var-fields
          - private-var-fields
          - public-late-var-fields
          - protected-late-var-fields
          - private-late-var-fields
          - overridden-public-getters-setters
          - public-getters-setters
          - protected-getters-setters
          - private-getters-setters
          - static-methods
          - overridden-public-methods
          - public-methods
          - protected-methods
          - private-methods
        widgets-order:
          - constructor
          - public-named-constructor
          - protected-named-constructor
          - private-named-constructor
          - public-const-static-fields
          - protected-const-static-fields
          - private-const-static-fields
          - public-static-fields
          - protected-static-fields
          - private-static-fields
          - public-static-getters-setters
          - protected-static-getters-setters
          - private-static-getters-setters
          - public-final-fields
          - protected-final-fields
          - private-final-fields
          - public-late-final-fields
          - protected-late-final-fields
          - private-late-final-fields
          - public-var-fields
          - protected-var-fields
          - private-var-fields
          - public-late-var-fields
          - protected-late-var-fields
          - private-late-var-fields
          - overridden-public-getters-setters
          - public-getters-setters
          - protected-getters-setters
          - private-getters-setters
          - static-methods
          - init-state-method
          - did-change-dependencies-method
          - did-update-widget-method
          - build-method
          - deactivate-method
          - dispose-method
          - overridden-public-methods
          - public-methods
          - protected-methods
          - private-methods
    - newline-before-method
    - no-boolean-literal-compare
    - no-empty-string
    - no-equal-conditions
    - no-equal-nested-conditions
    - no-equal-then-else
    - prefer-abstract-final-static-class
    - prefer-abstract-final-static-class
    - prefer-any-or-every
    - prefer-boolean-prefixes:
        ignored-names:
          - value
          - data
        prefixes:
          - is
          - are
          - was
          - were
          - has
          - have
          - had
          - can
          - should
          - will
          - do
          - does
          - did
          - use
          - with
          - default
          - push
          - handle
          - to
    - prefer-both-inlining-annotations
    - prefer-bytes-builder
    - prefer-compound-assignment-operators
    - prefer-contains
    - prefer-correct-error-name
    - prefer-correct-for-loop-increment
    - prefer-correct-json-casts
    - prefer-correct-stream-return-type
    - prefer-declaring-const-constructor
    - prefer-expect-later
    - prefer-explicit-function-type
    - prefer-first
    - prefer-for-in
    - prefer-iterable-of
    - prefer-last
    - prefer-named-boolean-parameters
    - prefer-null-aware-elements
    - prefer-null-aware-spread
    - prefer-parentheses-with-if-null
    - prefer-private-extension-type-field
    - prefer-pushing-conditional-expressions
    - prefer-return-await
    - prefer-returning-condition
    - prefer-returning-conditional-expressions
    - prefer-simpler-boolean-expressions
    - prefer-specifying-future-value-type
    - prefer-switch-expression
    - prefer-test-matchers
    - prefer-trailing-comma:
        break-on: 3
    - prefer-type-over-var
    - prefer-unique-test-names
    - prefer-unwrapping-future-or
    - prefer-visible-for-testing-on-members
    - prefer-wildcard-pattern
    - use-existing-destructuring

    # Flutter-specific rules:
    - always-remove-listener
    - avoid-border-all
    - avoid-expanded-as-spacer
    - avoid-incorrect-image-opacity
    - avoid-inherited-widget-in-initstate
    - avoid-late-context
    - avoid-missing-controller
    - avoid-mounted-in-setstate
    - avoid-recursive-widget-calls
    - avoid-shrink-wrap-in-lists
    - avoid-single-child-column-or-row
    - avoid-state-constructors
    - avoid-stateless-widget-initialized-fields
    - avoid-undisposed-instances
    - avoid-unnecessary-gesture-detector
    - avoid-unnecessary-overrides-in-state
    - avoid-unnecessary-setstate
    - avoid-unnecessary-stateful-widgets
    - avoid-wrapping-in-padding
    - dispose-fields
    - prefer-align-over-container
    - prefer-center-over-align
    - prefer-constrained-box-over-container
    - prefer-correct-edge-insets-constructor
    - prefer-dedicated-media-query-methods
    - prefer-define-hero-tag
    - prefer-padding-over-container
    - prefer-single-setstate
    - prefer-sized-box-square
    - prefer-sliver-prefix
    - prefer-text-rich
    - prefer-transform-over-container
    - prefer-using-list-view
    - proper-super-calls
    - use-closest-build-context
    - use-setstate-synchronously

    # Pubspec rule:
    - prefer-pinned-version-syntax
    - prefer-publish-to-none
    - prefer-semver-version
    - avoid-any-version
